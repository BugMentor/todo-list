# Base configuration
image: node:22

stages:
- build
- test
- security
- analyze
- report # New stage for HTML report generation
- deploy

variables:
  PLAYWRIGHT_REPORTS_DIR: playwright-report
  SERVER_LOG_FILE: server.log
  SECURITY_REPORT_FILE: security-report.json
  ANALYSIS_OUTPUT_FILE: analysis_results.json
  PYTHON_ANALYZER_SCRIPT: scripts/duo_troubleshoot_analyzer.py
  TROUBLESHOOT_REPORT_FILE: troubleshooting-report.html # New variable

# Shared pipeline rules
.default_rules: &default_rules
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# Dependency caching
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - node_modules/
  policy: pull-push

# Build stage
build:
  stage: build
  script:
  - echo "Building the application..."
  - npm install
  <<: *default_rules

# Test stage
test:
  stage: test
  image: mcr.microsoft.com/playwright:v1.55.1
  cache:
    key: ${CI_COMMIT_REF_SLUG} # Improved cache key
    paths:
    - node_modules/
  script:
  - echo "--- Test Job Setup ---"
  - npm ci
  - npm install -g http-server wait-on # Ensure wait-on is installed

  # Start the server in background
  - nohup http-server . -p 8080 -c-1 --silent > "${SERVER_LOG_FILE}" 2>&1 &
  - export APP_URL="http://localhost:8080"

  # Wait for server to be ready
  - npx wait-on "${APP_URL}" --timeout 60000 --interval 1000 || { echo "Server failed to start within timeout"; cat "${SERVER_LOG_FILE}"; exit 1; }

  - echo "--- Running Playwright tests ---"
  - mkdir -p "${PLAYWRIGHT_REPORTS_DIR}"

  # Generate both HTML and JUnit reports
  - npx playwright test
  - PLAYWRIGHT_EXIT_CODE=$?

  # Cleanup server
  - pkill -f "http-server" || true

  - echo "Test artifacts in ${PLAYWRIGHT_REPORTS_DIR}:"
  - ls -la "${PLAYWRIGHT_REPORTS_DIR}"

  - exit $PLAYWRIGHT_EXIT_CODE
  artifacts:
    when: always
    paths:
    - ${PLAYWRIGHT_REPORTS_DIR}/
    - ${SERVER_LOG_FILE}
    reports:
      junit: ${PLAYWRIGHT_REPORTS_DIR}/junit.xml
  retry:
    max: 1 # Reduced retry count
    when:
    - script_failure
  <<: *default_rules

# HTML Report generation
collect_playwright_html_report:
  stage: analyze
  needs:
  - job: test
    artifacts: true
  script:
  - echo "Collecting Playwright HTML report from ${PLAYWRIGHT_REPORTS_DIR}..."
  - ls -la "${PLAYWRIGHT_REPORTS_DIR}"
  artifacts:
    paths:
    - ${PLAYWRIGHT_REPORTS_DIR}/
    expire_in: 1 week
  <<: *default_rules
  when: on_success

# Security scanning
security_scan:
  stage: security
  needs:
  - build
  script:
  - echo "Running security scan..."
  - apt-get update && apt-get install -y jq
  - npm audit --json > "${SECURITY_REPORT_FILE}"
  - |
    if [ -s "${SECURITY_REPORT_FILE}" ]; then
      echo "Security report generated successfully"
      jq . "${SECURITY_REPORT_FILE}" | head -n 20
    else
      echo "No vulnerabilities found or report generation failed"
    fi
  artifacts:
    paths:
    - ${SECURITY_REPORT_FILE}
    expire_in: 1 week
  allow_failure: true
  <<: *default_rules

# Analysis stage (Python script)
analyze_results:
  stage: analyze
  image: python:3.10-slim-buster
  needs:
  - job: test
    artifacts: true
  - job: security_scan
    artifacts: true
    optional: true
  script:
  - echo "--- Running analysis script ---"
  - pip install --no-cache-dir --upgrade pip
  - pip install requests # Added to fix the ModuleNotFoundError
  - CI_LOG_PLACEHOLDER="GitLab CI log content from test job (placeholder)"
  - |
    python3 "${PYTHON_ANALYZER_SCRIPT}" \
      --gitlab-ci-log-placeholder "${CI_LOG_PLACEHOLDER}" \
      --playwright-html-report-path "${PLAYWRIGHT_REPORTS_DIR}" \
      --junit-xml-report-path "${PLAYWRIGHT_REPORTS_DIR}/junit.xml" \
      --security-scan-report-path "${SECURITY_REPORT_FILE}" \
      --server-log-path "${SERVER_LOG_FILE}" \
      > "${ANALYSIS_OUTPUT_FILE}"
  - echo "--- Analysis complete ---"
  - cat "${ANALYSIS_OUTPUT_FILE}"
  artifacts:
    paths:
    - ${ANALYSIS_OUTPUT_FILE}
    expire_in: 1 day
  <<: *default_rules
  when: always

# Troubleshooting Report
generate_troubleshooting_report:
  stage: report
  image: node:22
  needs:
  - job: test
    artifacts: true
  - job: security_scan
    artifacts: true
    optional: true
  - job: analyze_results
    artifacts: true
    optional: true
  script:
  - echo "--- Generating HTML Troubleshooting Report ---"
  - apt-get update && apt-get install -y jq curl
  - chmod +x scripts/troubleshoot_html_reporter.sh
  - scripts/troubleshoot_html_reporter.sh \ "${PLAYWRIGHT_REPORTS_DIR}" \ "${CI_PROJECT_DIR}" \ "${CI_PIPELINE_ID}" \ "${CI_COMMIT_BRANCH}" \ "${NODE_ENV:-development}"
  - echo "--- HTML Troubleshooting Report Generated ---"
  artifacts:
    when: always
    paths:
    - "${TROUBLESHOOT_REPORT_FILE}"
    expire_in: 1 week
  <<: *default_rules
  when: always

# Deployment
deploy:
  stage: deploy
  needs:
  - analyze_results
  - generate_troubleshooting_report
  script:
  - echo "Deploying application..."
  # Add deployment commands here
  rules:
  - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
