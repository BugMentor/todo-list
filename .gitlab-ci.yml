# Base configuration
include:
- template: Security/SAST.gitlab-ci.yml

image: node:22

stages:
- build
- test
- security
- analyze
- report
- deploy

variables:
  # Consistent naming for directories and files
  PLAYWRIGHT_REPORTS_DIR: playwright-report
  SERVER_LOG_FILE: server.log
  SECURITY_REPORT_FILE: security-report.json
  ANALYSIS_OUTPUT_FILE: analysis_results.json
  PYTHON_ANALYZER_SCRIPT: scripts/duo_troubleshoot_analyzer.py
  TROUBLESHOOT_REPORT_FILE: troubleshooting-report.html
  COVERAGE_DIR: coverage
  # SAST configuration
  SAST_EXCLUDED_PATHS: "node_modules, dist, coverage, playwright-report"
  SAST_ANALYZER_IMAGE_TAG: 3
  SCAN_KUBERNETES_MANIFESTS: "false"
  # Environment
  NODE_ENV: development

# Shared pipeline rules
.default_rules: &default_rules
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - node_modules/

# --- Build Stage ---
install_dependencies:
  stage: build
  script: npm ci
  artifacts:
    paths:
    - node_modules/
  <<: *default_rules

# --- Test Stage ---
run_tests:
  stage: test
  needs: [ install_dependencies ]
  script:
  - echo "START_TIME=$(date +%s)" > test_metrics.env
  - mkdir -p "${PLAYWRIGHT_REPORTS_DIR}"
  - npx playwright install --with-deps chromium
  - npx playwright test --reporter=html,junit --output="${PLAYWRIGHT_REPORTS_DIR}"
  - ls -la "${PLAYWRIGHT_REPORTS_DIR}"
  - echo "END_TIME=$(date +%s)" >> test_metrics.env
  - "START_TIME=$(grep START_TIME test_metrics.env | cut -d= -f2)"
  - "END_TIME=$(grep END_TIME test_metrics.env | cut -d= -f2)"
  - "TEST_DURATION=$((END_TIME - START_TIME))"
  - "echo TEST_DURATION=${TEST_DURATION} >> test_metrics.env"
  - "echo Test duration: ${TEST_DURATION} seconds"
  artifacts:
    paths:
    - "${PLAYWRIGHT_REPORTS_DIR}/"
    - "${COVERAGE_DIR}/"
    - test_metrics.env
    reports:
      junit: "${PLAYWRIGHT_REPORTS_DIR}/junit.xml"
  <<: *default_rules

# --- Security Stage ---
security_scan:
  stage: security
  needs: [ install_dependencies ]
  script:
  - apt-get update && apt-get install -y jq
  - npm audit --json > "${SECURITY_REPORT_FILE}" || true
  - "if [ -f \"${SECURITY_REPORT_FILE}\" ]; then jq -r '.metadata.vulnerabilities | to_entries[] | \"\\(.key): \\(.value)\"' \"${SECURITY_REPORT_FILE}\" 2>/dev/null || echo \"No vulnerabilities found or invalid format\"; else echo \"Security report file not found\"; fi"
  artifacts:
    paths:
    - "${SECURITY_REPORT_FILE}"
  <<: *default_rules

# --- Analyze Stage ---
analyze_results:
  stage: analyze
  needs: [ run_tests, security_scan ]
  image: python:3.10
  script:
  - pip install -r scripts/requirements.txt
  - ls -la "${PLAYWRIGHT_REPORTS_DIR}" || echo "Playwright reports directory not found"
  - "if [ -f \"${PLAYWRIGHT_REPORTS_DIR}/junit.xml\" ]; then echo \"JUnit report exists\"; else echo \"JUnit report missing\"; fi"
  - "if [ -f \"${SECURITY_REPORT_FILE}\" ]; then echo \"Security report exists\"; else echo \"Security report missing\"; fi"
  - python "${PYTHON_ANALYZER_SCRIPT}" --gitlab-ci-log-placeholder "${CI_JOB_URL}" --playwright-html-report-path "${PLAYWRIGHT_REPORTS_DIR}" --junit-xml-report-path "${PLAYWRIGHT_REPORTS_DIR}/junit.xml" --security-scan-report-path "${SECURITY_REPORT_FILE}" --server-log-path "${SERVER_LOG_FILE}" --output-file "${ANALYSIS_OUTPUT_FILE}" || true
  - "if [ -f \"${ANALYSIS_OUTPUT_FILE}\" ]; then cat \"${ANALYSIS_OUTPUT_FILE}\"; else echo \"Analysis output file not created\"; fi"
  artifacts:
    paths:
    - "${ANALYSIS_OUTPUT_FILE}"
  <<: *default_rules

# --- Report Stage ---
generate_troubleshooting_report:
  stage: report
  needs: [ run_tests, security_scan, analyze_results ]
  script:
  - apt-get update && apt-get install -y jq
  - source test_metrics.env
  - chmod +x scripts/troubleshoot_html_reporter.sh
  - scripts/troubleshoot_html_reporter.sh "${PLAYWRIGHT_REPORTS_DIR}" "${CI_PROJECT_DIR}" "${CI_PIPELINE_ID}" "${CI_COMMIT_BRANCH}" "${NODE_ENV}" "${COVERAGE_DIR}" "${SECURITY_REPORT_FILE}" "gl-sast-report.json" "${TEST_DURATION}" "${ANALYSIS_OUTPUT_FILE}"
  - "if [ -f \"${TROUBLESHOOT_REPORT_FILE}\" ]; then echo \"Troubleshooting report generated\"; else echo \"Troubleshooting report not created\"; fi"
  artifacts:
    paths:
    - "${TROUBLESHOOT_REPORT_FILE}"
    expire_in: 1 week
  <<: *default_rules

# --- Deploy Stage ---
deploy_dev:
  stage: deploy
  needs: [ run_tests, security_scan ]
  environment:
    name: development
    url: https://dev.example.com
  script:
  - echo "Deploying to development environment..."
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'

# --- Pages Deployment ---
pages:
  stage: deploy
  needs: [ generate_troubleshooting_report ]
  script:
  - mkdir -p public
  - cp "${TROUBLESHOOT_REPORT_FILE}" public/index.html
  - "if [ -d \"${PLAYWRIGHT_REPORTS_DIR}\" ]; then cp -r \"${PLAYWRIGHT_REPORTS_DIR}\" public/; else echo \"Playwright reports not found\"; fi"
  - "if [ -d \"${COVERAGE_DIR}\" ]; then cp -r \"${COVERAGE_DIR}\" public/; else echo \"Coverage directory not found\"; fi"
  artifacts:
    paths:
    - public
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
