# Base configuration
image: node:22

stages:
- build
- test
- security
- analyze
- deploy

variables:
  PLAYWRIGHT_REPORTS_DIR: playwright-report
  SERVER_LOG_FILE: server.log
  SECURITY_REPORT_FILE: security-report.json
  ANALYSIS_OUTPUT_FILE: analysis_results.json
  PYTHON_ANALYZER_SCRIPT: scripts/duo_troubleshoot_analyzer.py

# Shared pipeline rules
.default_rules: &default_rules
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# Dependency caching
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - node_modules/
  policy: pull-push

# Build stage
build:
  stage: build
  script:
  - echo "Building the application..."
  - npm install
  <<: *default_rules

# Test stage
test:
  stage: test
  image: mcr.microsoft.com/playwright:v1.55.1
  needs:
  - build
  script:
  - echo "--- Test Job Setup ---"
  - npm ci
  - npm install -g http-server || echo "http-server already installed"

  # Start server in background
  - nohup http-server . -p 8080 -c-1 --silent > "${SERVER_LOG_FILE}" 2>&1 &
  - export APP_URL="http://localhost:8080"

  # Wait for server to be ready
  - |
    npx wait-on "${APP_URL}" --timeout 60000 --interval 1000 || {
      echo "ERROR: Server failed to start or become ready."
      echo "--- Server Log Contents ---"
      cat "${SERVER_LOG_FILE}"
      echo "-------------------------"
      exit 1
    }

  # Run tests
  - echo "--- Running Playwright tests ---"
  - mkdir -p "${PLAYWRIGHT_REPORTS_DIR}"
  # Fixed command: Using proper reporter syntax for JUnit
  - npx playwright test --reporter=html --reporter=junit --output=${PLAYWRIGHT_REPORTS_DIR}/junit.xml
  - PLAYWRIGHT_EXIT_CODE=$?

  # Cleanup
  - pkill -f "http-server" || true
  - echo "Test artifacts in ${PLAYWRIGHT_REPORTS_DIR}:"
  - ls -la "${PLAYWRIGHT_REPORTS_DIR}"
  - exit $PLAYWRIGHT_EXIT_CODE
  artifacts:
    when: always
    paths:
    - "${PLAYWRIGHT_REPORTS_DIR}/"
    - "${SERVER_LOG_FILE}"
    reports:
      junit: "${PLAYWRIGHT_REPORTS_DIR}/junit.xml"
  <<: *default_rules

# HTML Report generation
html_report:
  stage: analyze
  needs:
  - job: test
    artifacts: true
  script:
  - echo "Processing HTML report from ${PLAYWRIGHT_REPORTS_DIR}..."
  - ls -la "${PLAYWRIGHT_REPORTS_DIR}"
  # Add any additional report processing here if needed
  artifacts:
    paths:
    - "${PLAYWRIGHT_REPORTS_DIR}/"
    expire_in: 1 week
  <<: *default_rules
  # Add explicit condition to ensure this job runs only when test succeeds
  when: on_success

# Security scanning
security_scan:
  stage: security
  needs:
  - build
  script:
  - echo "Running security scan..."
  - apt-get update && apt-get install -y jq
  - npm audit --json > "${SECURITY_REPORT_FILE}" || true
  - |
    if [ -s "${SECURITY_REPORT_FILE}" ]; then
      echo "Security report generated successfully"
      jq . "${SECURITY_REPORT_FILE}" | head -n 20
    else
      echo "No vulnerabilities found or report generation failed"
    fi
  artifacts:
    paths:
    - "${SECURITY_REPORT_FILE}"
    expire_in: 1 week
  allow_failure: true
  <<: *default_rules

# Analysis stage
analyze_results:
  stage: analyze
  image: python:3.10-slim-buster
  needs:
  - job: test
    artifacts: true
  - job: security_scan
    artifacts: true
    optional: true
  script:
  - echo "--- Running analysis script ---"
  - pip install --no-cache-dir --upgrade pip
  - chmod +x "${PYTHON_ANALYZER_SCRIPT}"
  - CI_LOG_PLACEHOLDER="GitLab CI log content from test job (placeholder)"
  - |
    python3 "${PYTHON_ANALYZER_SCRIPT}" \
      --gitlab-ci-log-placeholder "${CI_LOG_PLACEHOLDER}" \
      --playwright-html-report-path "${PLAYWRIGHT_REPORTS_DIR}" \
      --junit-xml-report-path "${PLAYWRIGHT_REPORTS_DIR}/junit.xml" \
      --security-scan-report-path "${SECURITY_REPORT_FILE}" \
      --server-log-path "${SERVER_LOG_FILE}" \
      > "${ANALYSIS_OUTPUT_FILE}"
  - echo "--- Analysis complete ---"
  - cat "${ANALYSIS_OUTPUT_FILE}"
  artifacts:
    paths:
    - "${ANALYSIS_OUTPUT_FILE}"
    expire_in: 1 day
  <<: *default_rules
  when: always

# Deployment
deploy:
  stage: deploy
  needs:
  - analyze_results
  script:
  - echo "Deploying application..."
  # Add deployment commands here
  rules:
  - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
