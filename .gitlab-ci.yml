# Base configuration
include:
- template: Security/SAST.gitlab-ci.yml

image: node:22

stages:
- build
- test
- security
- analyze
- report
- deploy

variables:
  # Consistent naming for directories and files
  PLAYWRIGHT_REPORTS_DIR: playwright-report
  SERVER_LOG_FILE: server.log
  SECURITY_REPORT_FILE: security-report.json
  ANALYSIS_OUTPUT_FILE: analysis_results.json
  PYTHON_ANALYZER_SCRIPT: scripts/duo_troubleshoot_analyzer.py
  TROUBLESHOOT_REPORT_FILE: troubleshooting-report.html
  COVERAGE_DIR: coverage
  # SAST configuration
  SAST_EXCLUDED_PATHS: "node_modules, dist, coverage, playwright-report"
  SAST_ANALYZER_IMAGE_TAG: 3
  SCAN_KUBERNETES_MANIFESTS: "false"
  # Environment
  NODE_ENV: development

# Shared pipeline rules
.default_rules: &default_rules
  rules:
  - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == "main"'

# Cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - node_modules/

# Install dependencies
install_dependencies:
  stage: build
  script:
  - npm ci
  artifacts:
    paths:
    - node_modules/
  <<: *default_rules

# Run tests with Playwright
run_tests:
  stage: test
  needs: [ install_dependencies ]
  script:
  - echo "START_TIME=$(date +%s)" > test_metrics.env
  - mkdir -p ${PLAYWRIGHT_REPORTS_DIR}
  - npx playwright install --with-deps chromium
  - npx playwright test --reporter=html,junit --output="${PLAYWRIGHT_REPORTS_DIR}"
  - echo "END_TIME=$(date +%s)" >> test_metrics.env
  - echo "TEST_DURATION=$(($(grep END_TIME test_metrics.env | cut -d= -f2) - $(grep START_TIME test_metrics.env | cut -d= -f2)))" >> test_metrics.env
  artifacts:
    paths:
    - ${PLAYWRIGHT_REPORTS_DIR}/
    - ${COVERAGE_DIR}/
    - test_metrics.env
    reports:
      junit: ${PLAYWRIGHT_REPORTS_DIR}/junit.xml
  <<: *default_rules

# Security scanning
security_scan:
  stage: security
  needs: [ install_dependencies ]
  script:
  - npm audit --json > ${SECURITY_REPORT_FILE} || true
  artifacts:
    paths:
    - ${SECURITY_REPORT_FILE}
  <<: *default_rules

# Analyze test results and logs
analyze_results:
  stage: analyze
  needs: [ run_tests, security_scan ]
  image: python:3.10
  script:
  - pip install -r scripts/requirements.txt
  - python ${PYTHON_ANALYZER_SCRIPT} --gitlab-ci-log-placeholder "${CI_JOB_URL}" --playwright-html-report-path "${PLAYWRIGHT_REPORTS_DIR}" --junit-xml-report-path "${PLAYWRIGHT_REPORTS_DIR}/junit.xml" --security-scan-report-path "${SECURITY_REPORT_FILE}" --server-log-path "${SERVER_LOG_FILE}" --output-file "${ANALYSIS_OUTPUT_FILE}"
  artifacts:
    paths:
    - ${ANALYSIS_OUTPUT_FILE}
  <<: *default_rules

# Generate troubleshooting report
generate_troubleshooting_report:
  stage: report
  needs: [ run_tests, security_scan, analyze_results ]
  script:
  - source test_metrics.env
  - chmod +x scripts/troubleshoot_html_reporter.sh
  - scripts/troubleshoot_html_reporter.sh "${PLAYWRIGHT_REPORTS_DIR}" "${CI_PROJECT_DIR}" "${CI_PIPELINE_ID}" "${CI_COMMIT_BRANCH}" "${NODE_ENV}" "${COVERAGE_DIR}" "${SECURITY_REPORT_FILE}" "gl-sast-report.json" "${ANALYSIS_OUTPUT_FILE}" "${TEST_DURATION}"
  artifacts:
    paths:
    - ${TROUBLESHOOT_REPORT_FILE}
    expire_in: 1 week
  <<: *default_rules

# Deploy to development environment
deploy_dev:
  stage: deploy
  needs: [ run_tests, security_scan ]
  environment:
    name: development
    url: https://dev.example.com
  script:
  - echo "Deploying to development environment..."
  - echo "Application would be deployed here in a real scenario"
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'

# Pages deployment for reports
pages:
  stage: deploy
  needs: [ generate_troubleshooting_report ]
  script:
  - mkdir -p public
  - cp ${TROUBLESHOOT_REPORT_FILE} public/index.html
  - cp -r ${PLAYWRIGHT_REPORTS_DIR} public/
  - cp -r ${COVERAGE_DIR} public/
  artifacts:
    paths:
    - public
  rules:
  - if: '$CI_COMMIT_BRANCH == "main"'
