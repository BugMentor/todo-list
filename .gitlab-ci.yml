# Default image for jobs that don't specify their own
image: node:22

stages:
  - build
  - test
  - security
  - analyze # New stage for analysis
  - deploy

variables:
  # Paths for reports and logs
  PLAYWRIGHT_REPORTS_DIR: playwright-report
  JUNIT_XML_FILE: ${PLAYWRIGHT_REPORTS_DIR}/junit.xml
  SERVER_LOG_FILE: server.log
  SECURITY_REPORT_FILE: security-report.json
  ANALYSIS_OUTPUT_FILE: analysis_results.json
  PYTHON_ANALYZER_SCRIPT: duo_troubleshoot_analyzer.py # Name of our Python script

# Cache node_modules to speed up subsequent jobs
cache:
  key: ${CI_COMMIT_REF_SLUG} # Cache per branch/MR
  paths:
    - node_modules/
  policy: pull-push # Pull cache at start, push at end

# Build stage
build:
  stage: build
  script:
    - echo "Building the application..."
    - npm install
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# Test stage with specific Playwright image
test:
  stage: test
  image: mcr.microsoft.com/playwright:v1.55.1 # Playwright image with pre-installed browsers
  needs:
    - build # Ensure build stage completes and cache is available
  script:
    - echo "--- Test Job Setup ---"
    - echo "Installing project dependencies..."
    - npm ci
    - echo "Current directory contents:"
    - ls -la
    - echo "Checking if http-server is available:"
    - which http-server || npm install -g http-server
    - echo "Starting TODO app in background..."
    - nohup http-server . -p 8080 -c-1 --silent > "${SERVER_LOG_FILE}" 2>&1 &
    - export APP_URL="http://localhost:8080"
    - echo "Waiting for app to be ready at ${APP_URL}..."
    - npx wait-on "${APP_URL}" --timeout 60000 --interval 1000 || {
        echo "ERROR: Server failed to start or become ready."
        echo "--- Contents of ${SERVER_LOG_FILE} ---"
        cat "${SERVER_LOG_FILE}"
        echo "----------------------------------------"
        exit 1
      }
    - echo "--- Running Playwright tests ---"
    - mkdir -p "${PLAYWRIGHT_REPORTS_DIR}"
    - npx playwright test --reporter=html,junit --output="${PLAYWRIGHT_REPORTS_DIR}"
    - PLAYWRIGHT_EXIT_CODE=$?
    - echo "Stopping TODO app..."
    - pkill -f "http-server" || true
    - exit $PLAYWRIGHT_EXIT_CODE
  artifacts:
    when: always
    paths:
      - "${PLAYWRIGHT_REPORTS_DIR}/"
      - "${SERVER_LOG_FILE}"
    reports:
      junit: "${JUNIT_XML_FILE}"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# Security stage
security_scan:
  stage: security
  needs:
    - build
  script:
    - echo "Running security scan..."
    - apt-get update && apt-get install -y jq
    - npm audit --json > "${SECURITY_REPORT_FILE}" || true
    - if [ -s "${SECURITY_REPORT_FILE}" ]; then echo "Security report generated successfully"; jq . "${SECURITY_REPORT_FILE}" | head -n 20; else echo "No vulnerabilities found or report generation failed"; fi
  artifacts:
    when: always
    paths:
      - "${SECURITY_REPORT_FILE}"
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

# Analyze stage - uses Python script
analyze_results:
  stage: analyze
  image: python:3.10-slim-buster
  needs:
    - job: test
      artifacts: true
    - job: security_scan
      artifacts: true
      optional: true
  script:
    - echo "--- Running troubleshooting and analysis script ---"
    - pip install --no-cache-dir --upgrade pip
    - chmod +x "${PYTHON_ANALYZER_SCRIPT}"
    - CI_LOG_PLACEHOLDER="GitLab CI log content from test job (placeholder)"
    - python3 "${PYTHON_ANALYZER_SCRIPT}" \
        --gitlab-ci-log-placeholder "${CI_LOG_PLACEHOLDER}" \
        --playwright-html-report-path "${PLAYWRIGHT_REPORTS_DIR}" \
        --junit-xml-report-path "${JUNIT_XML_FILE}" \
        --security-scan-report-path "${SECURITY_REPORT_FILE}" \
        --server-log-path "${SERVER_LOG_FILE}" \
        > "${ANALYSIS_OUTPUT_FILE}"
    - echo "--- Analysis complete. Results saved to ${ANALYSIS_OUTPUT_FILE} ---"
    - cat "${ANALYSIS_OUTPUT_FILE}"
  artifacts:
    when: always
    paths:
      - "${ANALYSIS_OUTPUT_FILE}"
    expire_in: 1 day
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: always

# Deploy stage
deploy:
  stage: deploy
  needs:
    - analyze_results
  script:
    - echo "Deploying application..."
    # Deployment commands go here
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
