stages:
- build
- test
- security
- troubleshoot
- deploy

variables:
  SECURITY_REPORT: security-report.json

# Build stage
build:
  stage: build
  script:
  - echo "Building the application..."
  - npm install
  artifacts:
    paths:
    - node_modules/
    expire_in: 1 day
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Test stage
test:
  stage: test
  script:
  - echo "Running tests..."
  - npm test
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Security stage
security_scan:
  stage: security
  script:
  - apt-get update && apt-get install -y jq
  - echo "Running security scan..."
  - npm audit --json > ${SECURITY_REPORT} || true
  - if [ -s "${SECURITY_REPORT}" ]; then echo "Security report generated successfully"; jq . ${SECURITY_REPORT} | head -n 20; else echo "No vulnerabilities found or report generation failed"; fi
  artifacts:
    paths:
    - ${SECURITY_REPORT}
    expire_in: 1 week
  allow_failure: true
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Troubleshoot stage - will always run after security
duo_troubleshoot:
  stage: troubleshoot
  needs:
  - job: security_scan
    optional: true # This ensures it runs even if security_scan fails
  script:
  - echo "Running troubleshooting steps..."
  - if [ -f "${SECURITY_REPORT}" ]; then echo "Analyzing security report..."; cat ${SECURITY_REPORT} | grep -i vulnerability || echo "No vulnerabilities found"; else echo "No security report found"; fi
  rules:
  - if: $CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    when: always # This ensures it always runs when the conditions are met

# Deploy stage
deploy:
  stage: deploy
  script:
  - echo "Deploying application..."
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
